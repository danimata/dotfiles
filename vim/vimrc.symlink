" -------------------------
" GENERAL
" -------------------------

" Must be called first
filetype off

call pathogen#runtime_append_all_bundles()

"This must be first, because it changes other options as a side effect.
set nocompatible

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

"store lots of :cmdline history
set history=10000

"colorscheme & font
colors railscasts

" -------------------------
" /GENERAL
" -------------------------

" -------------------------
" BACKUPS
" -------------------------
set backupdir=~/vim-tmp,~/.tmp,/tmp
set directory=~/vim-tmp,~/.tmp,/tmp

if has("vms")
  set nobackup                    " do not keep a backup file, use versions instead
else
  set backup                      " keep a backup file
endif


" -------------------------
" /BACKUPS
" -------------------------

" -------------------------
" STATUSLINE
" -------------------------
"return the syntax highlight group under the cursor ''
function! StatuslineCurrentHighlight()
    let name = synIDattr(synID(line('.'),col('.'),1),'name')
    if name == ''
        return ''
    else
        return '[' . name . ']'
    endif
endfunction

set statusline=%f       "tail of the filename

"display a warning if fileformat isnt unix
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?'['.&ff.']':''}
set statusline+=%*

"display a warning if file encoding isnt utf-8
set statusline+=%#warningmsg#
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
set statusline+=%*

set statusline+=%h      "help file flag
set statusline+=%y      "filetype
set statusline+=%r      "read only flag
set statusline+=%m      "modified flag

"display a warning if &et is wrong, or we have mixed-indenting
set statusline+=%#error#
set statusline+=%*

set statusline+=%#warningmsg#
set statusline+=%*

"display a warning if &paste is set
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*

set statusline+=%=      "left/right separator
set statusline+=%{StatuslineCurrentHighlight()}\ \ "current highlight
set statusline+=%c,     "cursor column
set statusline+=%l/%L   "cursor line/total lines
set statusline+=\ %P    "percent through file
" -------------------------
" /STATUSLINE
" -------------------------

" -------------------------
" GRAPHICAL
" -------------------------
"Visual
set ruler                  " show the cursor position all the time
set nolazyredraw           " turn off lazy redraw
set wildmenu               " turn on wild menu
set wildmode=longest,list
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set ch=2                   " command line height
" set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling

"Visual Cues
set showmatch             " brackets/braces that is
set mat=5                 " duration to show matching brace (1/10 sec)
set laststatus=2          " always show the status line
set ignorecase            " ignore case when searching
set visualbell            " shut the fuck up
set showcmd               " show incomplete cmds down the bottom
set showmode              " show current mode down the bottom
set incsearch             " find the next match as we type the search
set hlsearch              " hilight searches by default
set nowrap                " dont wrap lines
set linebreak             " wrap lines at convenient points
set autoread              " reload files (no local changes only)
" -------------------------
" /GRAPHICAL
" -------------------------

" -------------------------
" MAPPINGS
" -------------------------
" remap <LEADER> to ',' (instead of '\')
let mapleader = ","

map <s-D-Left> <C-w><Left>
map <s-D-Right> <C-w><Right>
map <s-D-Up> <C-w><Up>
map <s-D-Down> <C-w><Down>

imap <D-1> <Esc>:tabn 1<CR>i
imap <D-2> <Esc>:tabn 2<CR>i
imap <D-3> <Esc>:tabn 3<CR>i
imap <D-4> <Esc>:tabn 4<CR>i
imap <D-5> <Esc>:tabn 5<CR>i
imap <D-6> <Esc>:tabn 6<CR>i
imap <D-7> <Esc>:tabn 7<CR>i
imap <D-8> <Esc>:tabn 8<CR>i
imap <D-9> <Esc>:tabn 9<CR>i

map <D-1> :tabn 1<CR>
map <D-2> :tabn 2<CR>
map <D-3> :tabn 3<CR>
map <D-4> :tabn 4<CR>
map <D-5> :tabn 5<CR>
map <D-6> :tabn 6<CR>
map <D-7> :tabn 7<CR>
map <D-8> :tabn 8<CR>
map <D-9> :tabn 9<CR>


" -------------------------
" MAPPINGS
" -------------------------

"indent settings
set shiftwidth=2
set ts=2
set bs=2
set shiftround
set softtabstop=2
set expandtab
set smarttab
set autoindent

set textwidth=78

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default


"display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅

set formatoptions-=o "dont continue comments when pushing o/O

"vertical/horizontal scroll off settings
set scrolloff=3
set sidescrolloff=7
set sidescroll=1

"load ftplugins and indent files
filetype plugin on
filetype indent on

"turn on syntax highlighting
syntax on

"some stuff to get the mouse going in term
set mouse=a
set ttymouse=xterm2

"tell the term has 256 colors
set t_Co=256

"hide buffers when not displayed
set hidden

"dont load csapprox if we no gui support - silences an annoying warning
if !has("gui")
    let g:CSApprox_loaded = 1
endif

"make <c-l> clear the highlight as well as redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

"make <D-intro> jump add new line as in Textmate
inoremap <D-CR> <ESC>o

"map to NERDtree
nnoremap <c-t> :NERDTreeToggle<CR>

"map to bufexplorer
nnoremap <C-B> :BufExplorer<cr>

"map to fuzzy finder text mate stylez
nnoremap <c-f> :CommandTFlush<CR>:CommandT<CR>

"comment lines as with textmate
nmap <D-D> :TComment<cr>
vmap <D-D> :TComment<cr>

"map Q to something useful
noremap Q gq

"make Y consistent with C and D
nnoremap Y y$

" -------------------
" KEYBINDS
" -------------------
"Move lines up and down
map <C-J> :m +1 <CR>
map <C-K> :m -2 <CR>

"Duplicate a selection
vmap D y'>p

"one-key indentation
nmap > >>
nmap < <<

"Easier beginning/end of line
map H ^
map L $

" -------------------
" /KEYBINDS
" -------------------

"No Help, please
nmap <F1> <Esc>

"Use Ack instead of Grep when available
if executable("ack")
  set grepprg=ack\ -H\ --nogroup\ --nocolor\ --ignore-dir=tmp\ --ignore-dir=coverage
endif

"Numbers
set number
set numberwidth=5

"jump to last cursor position when opening a file
"dont do it when writing a commit log entry
autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
    if &filetype !~ 'commit\c'
        if line("'\"") > 0 && line("'\"") <= line("$")
            exe "normal! g`\""
            normal! zz
        endif
    end
endfunction


" -------------------
" AUTO & OTHERS
" -------------------
" Project Tree
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

" Disable netrw's autocmd, since we're ALWAYS using NERDTree
runtime plugin/netRwPlugin.vim
augroup FileExplorer
  au!
augroup END

let g:NERDTreeHijackNetrw = 0

autocmd BufWritePre * :%s/\s\+$//e

" New filetypes
autocmd BufNewFile,BufRead *.thor setf ruby

" Local config
if filereadable(".vimrclocal")
  source .vimrclocal
endif

" -------------------
" Roger Campos Additions
" Mainly from ryanb vimrc https://github.com/ryanb/dotfiles/blob/master/vimrc
" -------------------
command! Rroutes :e config/routes.rb
command! Rschema :e db/schema.rb

" Make shift-tab work
exe 'set t_kB=' . nr2char(27) . '[Z'


" From gary bernhardt at https://github.com/garybernhardt/dotfiles

" GRB: Put useful info in status line
:set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
:hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" GRB: clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<CR>/<BS>

" Remap the tab key to do autocompletion or indentation depending on the
" context (from http://www.vim.org/tips/tip.php?tip_id=102)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" When hitting <;>, complete a snippet if there is one; else, insert an actual
" <;>
function! InsertSnippetWrapper()
    let inserted = TriggerSnippet()
    if inserted == "\<tab>"
        return ";"
    else
        return inserted
    endif
endfunction
inoremap ; <c-r>=InsertSnippetWrapper()<cr>

set cursorline
